다음은 **“Speech Services by Google(패키지 ID: com.google.android.tts) + 각 언어 데이터”**가 설치되어 있어야만 실행되는 Android 앱(네이티브·Cordova / Capacitor·Flutter·Bubblewrap TWA 모두 해당)에서, 사용자가 필요한 TTS 엔진·음성팩을 자동으로 설치(또는 다운로드)하도록 유도하는 표준 절차입니다.

1 스토어(Play Console) 단계에서 할 수 있는 일
위치	권장 문구
앱 설명	“이 앱은 Google TTS(무료) 및 한국어·영어·중국어·일본어 음성 데이터를 필요로 합니다. 최초 실행 시 자동으로 설치 안내가 뜹니다.”
콘텐츠 등급 설문 › 기능 요구	“Text-to-Speech 기능 필수, 미설치 시 앱 내에서 설치 유도(Dialog → Play Store)”
초기 스크린샷	TTS 설치 안내 화면을 한 컷 포함(검수 속도 ↑)

Play 스토어 정책상 다른 앱을 ‘필수 의존성’으로 선언할 수는 없으므로, 설명 + 런타임 체크로 처리해야 합니다. 
Android Developers

2 런타임에서 자동 체크 → 설치(네이티브 Java/Kotlin 예시)
kotlin
복사
편집
private val DATA_CHECK = 1001
private lateinit var tts: TextToSpeech

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    // 1️⃣ TTS 엔진·언어 데이터 존재 여부 확인
    val check = Intent(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA)
    startActivityForResult(check, DATA_CHECK)
}

override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
    super.onActivityResult(requestCode, resultCode, data)
    if (requestCode == DATA_CHECK) {
        if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) {
            // 2️⃣ 바로 초기화
            tts = TextToSpeech(this) { status ->
                if (status == TextToSpeech.SUCCESS) {
                    val ok = tts.setLanguage(Locale.KOREAN)
                    if (ok == TextToSpeech.LANG_MISSING_DATA) {
                        installLangData()      // 언어팩만 누락
                    }
                }
            }
        } else {
            installLangData()                  // 엔진·데이터 통째로 없음
        }
    }
}

private fun installLangData() {
    // 3️⃣ Google TTS 설치 & 언어 데이터 다운로드 화면으로 이동
    startActivity(
        Intent(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA)
            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    )
}
엔진이 없거나(INSTALL_TTS_DATA), 언어 데이터가 없는 경우(LANG_MISSING_DATA) 모두 공식 인텐트를 호출하면
Play 스토어 → “Speech Services by Google” 설치 → 언어 선택·다운로드 화면이 자동으로 열립니다.

같은 방식으로 Locale.ENGLISH, Locale.CHINESE, Locale.JAPANESE 를 순차 체크해 4개 언어가 모두 PASS될 때만 앱 본 기능을 활성화하면 됩니다.

Cordova/Capacitor (cordova-plugin-tts)·Flutter(flutter_tts)도 네이티브 side plugin 내부에서 동일 인텐트를 노출하므로, JS/Dart 코드에서 await Tts.isLanguageAvailable() 후 Tts.openInstallTtsData() 호출하면 끝.

ACTION_INSTALL_TTS_DATA 및 결과 코드 정의는 Android SDK 공식 문서에 명시돼 있습니다. 
android-doc.com

3 Bubblewrap TWA / PWA 환경일 때
브라우저 레이어에서는 Java API 호출이 불가하므로,

speechSynthesis.getVoices() 로 4개 언어 voice 존재 여부를 JS에서 점검 →

없으면 모달 창에 “TTS 설치하기” 버튼(링크: market://details?id=com.google.android.tts 혹은 https://play.google.com/store/apps/details?id=com.google.android.tts) 띄우기 →

클릭 시 Play 스토어로 이동.

설치 완료 후 다시 앱으로 돌아오면 speechSynthesis.onvoiceschanged 이벤트가 뜨므로, 이때 기능을 활성화하면 UX 끊김 최소화.

TWA는 Play 스토어 내 업데이트 흐름과 동일하게 동작하므로 리뷰 통과에 문제 없습니다.

4 사용자 경험(UX) 팁
첫 실행 Onboarding

4단계 진행바 ➜ ①권한(오디오) ➜ ②TTS 설치 ➜ ③언어 데이터 다운로드 ➜ ④앱 사용 시작.

설치가 끝날 때까지 ‘건너뛰기’ 비활성화 → TTS 미설치 상태에서 메인 기능 클릭 시 다시 설치 안내.

오프라인·저속 네트워크 대비: 음성 데이터 다운로드가 실패하면 오류 토스트 + 재시도 버튼.

설정 메뉴 > “TTS 상태 보기” 항목 추가 → Intent(Settings.ACTION_LOCALE_SETTINGS) 로 바로 이동 가능.

앱 내 테스트 버튼: “안녕하세요” 한 줄 읽어주기 → 정상 동작 여부를 바로 체감.

핵심 체크리스트
 ACTION_CHECK_TTS_DATA와 ACTION_INSTALL_TTS_DATA 로 엔진/언어 자동 점검·설치

 실패 시 Play 스토어 market://details?id=com.google.android.tts 로 딥링크

 모든 Locale(KO, EN, ZH, JA) LANG_AVAILABLE 확인 후 메인 기능 활성화

 스토어 설명·스크린샷에 “Google TTS 필수” 명시

 PWA/TWA는 JS speechSynthesis 존재 + Play 스토어 링크로 대체 처리

이 흐름을 구현해 두면 TTS가 사전 설치되지 않은 저가형 기기나 해외 펌웨어에서도 사용자가 한 번의 클릭으로 필요한 엔진·언어 데이터를 받아 바로 앱을 사용할 수 있습니다. 즐거운 배포·운영 되세요!